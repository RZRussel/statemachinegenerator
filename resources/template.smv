-- Module for modeling penguin's snowball actor --
MODULE Snowball(world, owner)

  DEFINE 
    d_radius := 10; -- snowball's radius
  	d_fly_velocity := 10; -- snowball's flying velocity

  -- relations --
  DEFINE
    FlightPosChanged := @flew@;

    CollisionDetected := @collision_detected@;

    DeadPointReached := @dead_point_reached@;

  VAR
    x: 0..world.d_max_x; -- x position in the world --
    y: 0..world.d_max_y; -- y position in the world --
    fly_flag: boolean; -- flag states whether the snowball was thrown and active --
    direction: 0..359; -- current flying direction --

  DEFINE
    Deact := !fly_flag & !next(fly_flag) 
      & next(x) = x & next(y) = y 
      & next(direction) = direction;

    Fly := !bool(owner.opponent.snowball_collision)
      & FlightPosChanged & next(direction) = direction
      & fly_flag & next(fly_flag) = !DeadPointReached;

    Collide := bool(owner.opponent.snowball_collision)
      & next(x) = x & next(y) = y & next(direction) = direction
      & fly_flag & !next(fly_flag);

    Act := owner.Throw | owner.ThrowWhilePushed;

    ValidAction := Fly & !Act & !Deact & !Collide
      | !Fly & Act & !Deact & !Collide
      | !Fly & !Act & Deact & !Collide
      | !Fly & !Act & !Deact & Collide;
  
-- Module for modeling penguin actor --
MODULE Penguin(world, opponent)
	
  -- constants --
  DEFINE
  	d_move_velocity := 5;	-- all penguins can perform move action with const velocity (5.4)
  	d_radius := 27;			-- penguin's body is a circle with const radius (27)
  	d_stun_timer_max := 30;	-- time for which penguin freezes after got hit with a snowball
  	d_flash_index_max := 15; -- initial index in the flash process (process is active while index > 0)
  	d_flash_velocity := 10; -- initial penguin's velocity while flash action
  	d_flash_timer_max := 60;  -- time during which penguin can't perform flash action again
    d_penguin_pushed_index_max := @max_pushed_index@; -- maximum index penguin can have when pushed
    d_penguin_pushed_velocity_max := @max_pushed_velocity@; -- maximum velocity penguin can have when pushed 
  	d_snowball_timer_max := 60; -- time during which penguin can't perform throwing snowball again

  -- relations --
  DEFINE
    MovePosChanged := @moved@;

    SnowballInit := @snowball_initialized@;
    
    FlashPosChanged := @flashed@;

    PushedPosChanged := @pushed@;

    PushedInitIndex := @pushed_initial_index@;

    StaticCollisionInitialized := @static_collision_initialized@;

    FlashCollisionInitialized := @flash_collision_initialized@;

    CollisionDetected := @collision_detected@;

    DeadPointReached := @dead_point_reached@;

  StunTimerAct := next(stun_timer) = d_stun_timer_max;
  StunTimerTick := stun_timer > 0 & next(stun_timer) = stun_timer - 1;
  StunTimerDeact := stun_timer = 0 & next(stun_timer) = 0;
  FlashTimerAct := flash_timer = 0 & next(flash_timer) = d_flash_timer_max;
  FlashTimerTick := flash_timer > 0 & next(flash_timer) = flash_timer - 1;
  FlashTimerDeact := flash_timer = 0 & next(flash_timer) = 0;
  SnowballTimerAct := snowball_timer = 0 & next(snowball_timer) = d_snowball_timer_max;
  SnowballTimerTick := snowball_timer > 0 & next(snowball_timer) = snowball_timer - 1;
  SnowballTimerDeact := snowball_timer = 0 & next(snowball_timer) = 0;

  PenguinCollisionChecked := bool(next(penguin_collision)) = (CollisionDetected & !next(dead) & !next(opponent.dead));
  SnowballCollisionChecked := bool(next(snowball_collision)) = (opponent.snowball.CollisionDetected & !next(dead) & next(opponent.snowball.fly_flag));

  VAR
  	x: 0..world.d_max_x; -- current x penguin's position in the world
  	y: 0..world.d_max_y; -- current y penguin's position in the world
  	direction: 0..359; -- current flashed, pushed or moved direction
  	stun_timer: 0..d_stun_timer_max; -- current remained time during which penguin can do nothing
  	flash_index: 0..d_flash_index_max; -- current index of the flash action
  	flash_timer: 0..d_flash_timer_max; -- current remained time during which penguin can't perform push action
  	pushed_index: 0..d_penguin_pushed_index_max; -- current velocity index of the pushed penguin
  	pushed_velocity: 0..d_penguin_pushed_velocity_max; -- initial velocity penguin received after the push
    dead: boolean; -- flag states whether penguin dead
    penguin_collision: unsigned word[1]; -- flags states whether there is a collision with i-th penguin
  	snowball_collision: unsigned word[1]; -- flags states whether there is a collision with i-th snowball
  	snowball_timer: 0..d_snowball_timer_max; -- current remained time during which a penguin can't perform throw action
    snowball: Snowball(world, self); -- penguin's snoball reference

-- action definitions --
  DEFINE
    Move := MovePosChanged 
      & StunTimerDeact
      & flash_index = 0 & next(flash_index) = 0
      & (FlashTimerDeact | FlashTimerTick)
      & pushed_index = 0 & next(pushed_index) = 0
      & next(pushed_velocity) = pushed_velocity
      & !dead & next(dead) = DeadPointReached
      & !bool(penguin_collision) & PenguinCollisionChecked
      & !bool(snowball_collision) & SnowballCollisionChecked
      & (SnowballTimerDeact | SnowballTimerTick);

    Throw := next(x) = x & next(y) = y
      & StunTimerDeact
      & flash_index = 0 & next(flash_index) = 0
      & (FlashTimerDeact | FlashTimerTick)
      & pushed_index = 0 & next(pushed_index) = 0
      & next(pushed_velocity) = pushed_velocity
      & !dead & !next(dead)
      & !bool(penguin_collision) & PenguinCollisionChecked
      & !bool(snowball_collision) & SnowballCollisionChecked
      & SnowballTimerAct
      & SnowballInit
      & !snowball.fly_flag & next(snowball.fly_flag);

    ThrowWhilePushed := PushedPosChanged & next(direction) = direction
      & StunTimerDeact
      & flash_index = 0 & next(flash_index) = 0
      & (FlashTimerDeact | FlashTimerTick)
      & pushed_index > 0 & next(pushed_index) = pushed_index - 1
      & next(pushed_velocity) = pushed_velocity
      & !dead & next(dead) = DeadPointReached
      & !bool(penguin_collision) & PenguinCollisionChecked
      & !bool(snowball_collision) & SnowballCollisionChecked
      & SnowballTimerAct
      & SnowballInit
      & !snowball.fly_flag & next(snowball.fly_flag);

    Push := next(x) = x & next(y) = y
      & StunTimerDeact
      & flash_index = 0 & next(flash_index) = d_flash_index_max
      & FlashTimerAct
      & pushed_index = 0 & next(pushed_index) = 0
      & next(pushed_velocity) = pushed_velocity
      & !dead & !next(dead)
      & !bool(penguin_collision) & PenguinCollisionChecked
      & !bool(snowball_collision) & SnowballCollisionChecked
      & (SnowballTimerDeact | SnowballTimerTick);

    Stay := next(x) = x & next(y) = y & next(direction) = direction
      & (StunTimerDeact | StunTimerTick)
      & flash_index = 0 & next(flash_index) = 0
      & (FlashTimerDeact | FlashTimerTick)
      & pushed_index = 0 & next(pushed_index) = 0
      & next(pushed_velocity) = pushed_velocity
      & !dead & !next(dead)
      & !bool(penguin_collision) & PenguinCollisionChecked
      & !bool(snowball_collision) & SnowballCollisionChecked
      & (SnowballTimerDeact | SnowballTimerTick);

    Dead := next(x) = x & next(y) = y & next(direction) = direction
      & next(stun_timer) = stun_timer
      & next(flash_index) = flash_index
      & next(flash_timer) = flash_timer
      & next(pushed_index) = pushed_index
      & next(pushed_velocity) = pushed_velocity
      & dead & next(dead)
      & !bool(penguin_collision) & !bool(next(penguin_collision))
      & !bool(snowball_collision) & !bool(next(snowball_collision))
      & next(snowball_timer) = snowball_timer;

    Flash := FlashPosChanged & next(direction) = direction
      & StunTimerDeact
      & flash_index > 0 & next(flash_index) = flash_index - 1
      & (FlashTimerDeact | FlashTimerTick)
      & pushed_index = 0 & next(pushed_index) = 0
      & next(pushed_velocity) = pushed_velocity
      & !dead & next(dead) = DeadPointReached
      & !bool(penguin_collision) & PenguinCollisionChecked
      & !bool(snowball_collision) & SnowballCollisionChecked
      & (SnowballTimerDeact | SnowballTimerTick);
    
    Pushed := PushedPosChanged & next(direction) = direction
      & (StunTimerDeact | StunTimerTick)
      & flash_index = 0 & next(flash_index) = 0
      & (FlashTimerDeact | FlashTimerTick)
      & pushed_index > 0 & next(pushed_index) = pushed_index - 1
      & next(pushed_velocity) = pushed_velocity
      & !dead & next(dead) = DeadPointReached
      & !bool(penguin_collision) & PenguinCollisionChecked
      & !bool(snowball_collision) & SnowballCollisionChecked
      & (SnowballTimerDeact | SnowballTimerTick);

    PenguinCollisionResolved := ((flash_index = 0 & pushed_index = 0
          & ((opponent.flash_index = 0 & opponent.pushed_index = 0 
              & StaticCollisionInitialized
              & next(pushed_index) = PushedInitIndex)
          | (opponent.flash_index > 0 & opponent.pushed_index = 0
              & FlashCollisionInitialized
              & next(pushed_index) = PushedInitIndex)
          | (opponent.flash_index = 0 & opponent.pushed_index > 0
              & StaticCollisionInitialized
              & next(pushed_index) = PushedInitIndex)))
      | (flash_index > 0 & pushed_index = 0
          & ((opponent.flash_index = 0 & opponent.pushed_index = 0 
              & next(direction) = direction & next(pushed_velocity) = 0
              & next(pushed_index) = 0)
          | (opponent.flash_index > 0 & opponent.pushed_index = 0
              & FlashCollisionInitialized
              & next(pushed_index) = PushedInitIndex)
          | (opponent.flash_index = 0 & opponent.pushed_index > 0
              & next(direction) = direction & next(pushed_velocity) = 0
              & next(pushed_index) = 0)))
      | (flash_index = 0 & pushed_index > 0
          & ((opponent.flash_index = 0 & opponent.pushed_index = 0 
              & StaticCollisionInitialized
              & next(pushed_index) = PushedInitIndex)
          | (opponent.flash_index > 0 & opponent.pushed_index = 0
              & FlashCollisionInitialized
              & next(pushed_index) = PushedInitIndex)
          | (opponent.flash_index = 0 & opponent.pushed_index > 0
              & StaticCollisionInitialized
              & next(pushed_index) = PushedInitIndex))))
      & next(flash_index) = 0; 

    CollidePenguin := next(x) = x & next(y) = y
      & (StunTimerDeact | StunTimerTick)
      & PenguinCollisionResolved
      & (FlashTimerDeact | FlashTimerTick)
      & !dead & !next(dead)
      & bool(penguin_collision) & !bool(next(penguin_collision))
      & !bool(snowball_collision) & SnowballCollisionChecked
      & (SnowballTimerDeact | SnowballTimerTick);

    CollideSnowball := next(x) = x & next(y) = y & next(direction) = direction
      & (flash_index > 0 & StunTimerDeact | flash_index = 0 & StunTimerAct)
      & next(flash_index) = flash_index
      & (FlashTimerDeact | FlashTimerTick)
      & next(pushed_index) = pushed_index
      & next(pushed_velocity) = pushed_velocity
      & !dead & !next(dead)
      & !bool(penguin_collision) & PenguinCollisionChecked 
      & bool(snowball_collision) & !bool(next(snowball_collision))
      & (SnowballTimerDeact | SnowballTimerTick);

    CollideSnowballPenguin := next(x) = x & next(y) = y
      & (flash_index > 0 & StunTimerDeact | flash_index = 0 & StunTimerAct)
      & PenguinCollisionResolved
      & (FlashTimerDeact | FlashTimerTick)
      & !dead & !next(dead)
      & bool(penguin_collision) & !bool(next(penguin_collision))
      & bool(snowball_collision) & !bool(next(snowball_collision))
      & (SnowballTimerDeact | SnowballTimerTick);

    ValidAction := Move & !Throw & !ThrowWhilePushed & !Push & !Stay & !Flash & !Pushed & !CollidePenguin & !CollideSnowball
        & !CollideSnowballPenguin & !Dead
      | !Move & Throw & !ThrowWhilePushed & !Push & !Stay & !Flash & !Pushed & !CollidePenguin & !CollideSnowball
        & !CollideSnowballPenguin & !Dead 
      | !Move & !Throw & ThrowWhilePushed & !Push & !Stay & !Flash & !Pushed & !CollidePenguin & !CollideSnowball
        & !CollideSnowballPenguin & !Dead
      | !Move & !Throw & !ThrowWhilePushed & Push & !Stay & !Flash & !Pushed & !CollidePenguin & !CollideSnowball
        & !CollideSnowballPenguin & !Dead
      | !Move & !Throw & !ThrowWhilePushed & !Push & Stay & !Flash & !Pushed & !CollidePenguin & !CollideSnowball
        & !CollideSnowballPenguin & !Dead
      | !Move & !Throw & !ThrowWhilePushed & !Push & !Stay & Flash & !Pushed & !CollidePenguin & !CollideSnowball
        & !CollideSnowballPenguin & !Dead
      | !Move & !Throw & !ThrowWhilePushed & !Push & !Stay & !Flash & Pushed & !CollidePenguin & !CollideSnowball
        & !CollideSnowballPenguin & !Dead
      | !Move & !Throw & !ThrowWhilePushed & !Push & !Stay & !Flash & !Pushed & CollidePenguin & !CollideSnowball
        & !CollideSnowballPenguin & !Dead
      | !Move & !Throw & !ThrowWhilePushed & !Push & !Stay & !Flash & !Pushed & !CollidePenguin & CollideSnowball
        & !CollideSnowballPenguin & !Dead
      | !Move & !Throw & !ThrowWhilePushed & !Push & !Stay & !Flash & !Pushed & !CollidePenguin & !CollideSnowball
        & CollideSnowballPenguin & !Dead
      | !Move & !Throw & !ThrowWhilePushed & !Push & !Stay & !Flash & !Pushed & !CollidePenguin & !CollideSnowball
        & !CollideSnowballPenguin & Dead;

-- Module for modeling island actor --
MODULE Island(world)
  
  DEFINE
    d_center_x := 368; -- island's x position in the world
    d_center_y := 207; -- island's y position in the world
    d_small_radius := 162; -- island's elepsis body small radius
    d_big_radius := 251; -- island's elepsis body big radius

-- Module for modeling world actor --
MODULE World

  DEFINE
  	d_max_x := 736; -- 2D world's width
  	d_max_y := 414; -- 2D world's height
